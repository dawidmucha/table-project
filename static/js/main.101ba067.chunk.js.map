{"version":3,"sources":["App.js","index.js"],"names":["App","state","companies","table","sorting","id","undefined","name","city","sum","avg","last","inputs","pagination","recordsPerPage","pageNumber","putTableContentToState","bind","sortBy","handleChange","onSelectChange","fetch","then","res","rej","json","listOfCompanies","a","Promise","all","map","company","companyIncomes","listOfCompaniesMatchedCompany","filter","setState","catch","err","console","log","this","i","concat","sumOfIncomes","incomes","length","toFixed","lastMonthIncome","e","target","value","element","sort","b","button","len","records","pages","preventDefault","reduce","acc","income","parseFloat","Math","round","now","Date","monthTwoDigits","getMonth","lastMonthRegex","getFullYear","date","match","toString","includes","toLowerCase","Intl","NumberFormat","format","onClick","type","onChange","colspan","onPageChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.101ba067.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      companies: [],\r\n      table: [],\r\n      sorting: {\r\n        id: undefined,\r\n        name: undefined,\r\n        city: undefined,\r\n        sum: undefined,\r\n        avg: undefined,\r\n        last: undefined\r\n      },\r\n      inputs: {\r\n        id: '',\r\n        name: '',\r\n        city: '',\r\n        sum: '',\r\n        avg: '',\r\n        last: ''\r\n      },\r\n      pagination: {\r\n        recordsPerPage: 10,\r\n        pageNumber: 0\r\n      }\r\n    }\r\n\r\n    this.putTableContentToState = this.putTableContentToState.bind(this)\r\n    this.sortBy = this.sortBy.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.onSelectChange = this.onSelectChange.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://recruitment.hal.skygate.io/companies').then((res, rej) => { // get the list of all companies\r\n      return res.json()\r\n    }).then(async listOfCompanies => {\r\n      return Promise.all(listOfCompanies.map(company => {\r\n        return fetch(`https://recruitment.hal.skygate.io/incomes/${company.id}`).then((res, rej) => { // fetch the incomes of a specific company\r\n          return res.json()\r\n        }).then(companyIncomes => {\r\n          const listOfCompaniesMatchedCompany = listOfCompanies.filter(company => { // filter list of companies...\r\n            return company.id === companyIncomes.id // ...to match only when its id equls the id of incomes from a specific company\r\n          })[0] // turn 1-element array into object\r\n\r\n          this.setState(state => ({\r\n            companies: [...state.companies, {...listOfCompaniesMatchedCompany, ...companyIncomes}] // spread both pieces to create one joint object\r\n          }))\r\n        })\r\n      }))\r\n    }).then(() => {\r\n      this.putTableContentToState()\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  async putTableContentToState() {\r\n    Promise.all(this.state.companies.map((company, i) => {\r\n      this.setState((state) => {\r\n        return {\r\n          table: state.table.concat({\r\n            id: company.id,\r\n            name: company.name,\r\n            city: company.city,\r\n            sum: this.sumOfIncomes(company.incomes),\r\n            avg: (this.sumOfIncomes(company.incomes) / company.incomes.length).toFixed(2),\r\n            last: this.lastMonthIncome(company.incomes).toFixed(2)\r\n          })\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n  handleChange(e) {\r\n    const target = e.target\r\n    this.setState(state => {\r\n      return {\r\n        inputs: {\r\n          ...state.inputs,\r\n          [target.name]: target.value\r\n        },\r\n        pagination: {\r\n          ...state.pagination,\r\n          pageNumber: 0\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  sortBy(element) {\r\n    this.setState(state => {\r\n      if(this.state.sorting[element] === 'asc') {\r\n        return {\r\n          table: state.table.sort((a, b) => (a[element] < b[element] ? 1 : -1)), //asc sort\r\n          sorting: {\r\n            [element]: 'desc'\r\n          }\r\n        }\r\n      } else {\r\n        return {\r\n          table: state.table.sort((a, b) => (a[element] > b[element] ? 1 : -1)), //asc sort\r\n          sorting: {\r\n            [element]: 'asc'\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  onPageChange(e, button, len) {\r\n    const records = this.state.pagination.recordsPerPage\r\n    const pages = this.state.pagination.pageNumber\r\n    \r\n    e.preventDefault()\r\n\r\n    if(button === 'gt' && (records*(pages+1)) < len) {\r\n      this.setState(state => ({\r\n        pagination: {\r\n          ...state.pagination,\r\n          pageNumber: state.pagination.pageNumber+1\r\n        }\r\n      }))\r\n    } else if(button === 'lt' && pages > 0) {\r\n      this.setState(state => ({\r\n        pagination: {\r\n          ...state.pagination,\r\n          pageNumber: state.pagination.pageNumber-1\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  onSelectChange(e) {\r\n    const target = e.target\r\n    this.setState(state => ({ \r\n      pagination: {\r\n        ...state.pagination,\r\n        recordsPerPage: target.value,\r\n        pageNumber: 0\r\n      }\r\n    }))\r\n  }\r\n\r\n  sumOfIncomes(incomes) {\r\n    const sum = incomes.reduce((acc, income) => {\r\n      return acc + parseFloat(income.value)\r\n    }, 0)\r\n    return (Math.round(sum * 100) / 100).toFixed(2) //round up to 2 dec points, then print 2 dec points always\r\n  }\r\n\r\n  lastMonthIncome(incomes) {\r\n    const now = new Date(Date.now())\r\n    const monthTwoDigits = now.getMonth() <= 9 ? `0${now.getMonth()}` : now.getMonth()\r\n    const lastMonthRegex = `^${now.getFullYear()}-${monthTwoDigits-1}` //returns if string begins with '2020-03' or today's equivalent\r\n    return incomes.reduce((acc, income) => {\r\n      if(income.date.match(lastMonthRegex)) {\r\n        return acc + parseFloat(income.value)\r\n      } else return acc\r\n    }, 0)\r\n  }\r\n\r\n  render() {\r\n    const records = this.state.pagination.recordsPerPage\r\n    const pages = this.state.pagination.pageNumber\r\n\r\n    const companies = this.state.table.filter(company => {\r\n      return (\r\n        company.id.toString().includes(this.state.inputs.id) &&\r\n        company.name.toLowerCase().includes(this.state.inputs.name.toLowerCase()) &&\r\n        company.city.toLowerCase().includes(this.state.inputs.city.toLowerCase()) &&\r\n        company.sum.toLowerCase().includes(this.state.inputs.sum.toLowerCase()) &&\r\n        company.avg.toLowerCase().includes(this.state.inputs.avg.toLowerCase()) &&\r\n        company.last.toLowerCase().includes(this.state.inputs.last.toLowerCase())\r\n      )\r\n    }).map((company, i) => {\r\n      if(i >= (records * pages) && i <= (records * (pages+1)-1)) {\r\n        return (\r\n          <tr>\r\n            <td>{company.id}</td>\r\n            <td>{company.name}</td>\r\n            <td>{company.city}</td>\r\n            <td>{new Intl.NumberFormat().format(company.sum)}</td>\r\n            <td>{new Intl.NumberFormat().format(company.avg)}</td>\r\n            <td>{new Intl.NumberFormat().format(company.last)}</td>\r\n          </tr>\r\n        )\r\n      }\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={() => this.sortBy('id')}>id</th>\r\n              <th onClick={() => this.sortBy('name')}>name</th>\r\n              <th onClick={() => this.sortBy('city')}>city</th>\r\n              <th onClick={() => this.sortBy('sum')}>tot. income</th>\r\n              <th onClick={() => this.sortBy('avg')}>avg. income</th>\r\n              <th onClick={() => this.sortBy('last')}>last month income</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td><input id='tSearchId' type='text' name='id' onChange={this.handleChange} /></td>\r\n              <td><input id='tSearchName' type='text' name='name' onChange={this.handleChange} /></td>\r\n              <td><input id='tSearchCity' type='text' name='city' onChange={this.handleChange} /></td>\r\n              <td><input id='tSearchSum' type='text' name='sum' onChange={this.handleChange} /></td>\r\n              <td><input id='tSearchAvg' type='text' name='avg' onChange={this.handleChange} /></td>\r\n              <td><input id='tSearchLast' type='text' name='last' onChange={this.handleChange} /></td>\r\n            </tr>\r\n            {companies}\r\n            <tr>\r\n              <td colspan='6'>\r\n                <form>\r\n                  <button id='backButton' onClick={(e) => this.onPageChange(e, 'lt', companies.length)}>&lt;</button> \r\n                  <select id='dropdown' name='recordsPerPage' onChange={this.onSelectChange} value={this.state.pagination.recordsPerPage}>\r\n                    <option value='10'>10</option>\r\n                    <option value='25'>25</option>\r\n                    <option value='50'>50</option>\r\n                    <option value='100'>100</option>\r\n                  </select>\r\n                  <button id='forwardButton' onClick={(e) => this.onPageChange(e, 'gt', companies.length)}>&gt;</button>\r\n                </form>\r\n                <span>{`(${(pages*records)+1}-${((pages+1)*records) < companies.length ? ((pages+1)*records) : companies.length})/${companies.length}`}</span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}